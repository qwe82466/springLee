<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.member.persistence.MemberMapper">

	<insert id="addMember">
		insert into memberSec(id, pw, name, email, gender) 
		values(#{id}, #{pw}, #{name}, #{email}, #{gender})
	</insert>
	<insert id="addAuth">
		insert into memberSec_auth values(#{id}, #{auth})
	</insert>
	
	<!-- MemberVO 안에 컬렉션 List가 있으므로 select 문 날려서 가져오는 결과를
		MemberVO 안에 잘 바인딩시켜 결과물을 리턴해주기 위해 
		result(리턴)타입인 MemberVO 타입를 mybatis에서 잘 처리되도록 
		새로 정의하기 : resultMap 태그 사용. 
	 -->
	<!-- 회원정보테이블의 데이터를 MemberVO의 변수에 각각 잘 바인딩되도록
		변수에 대입할 컬럼 명확히 정의 -->
	<resultMap type="com.member.domain.MemberVO" id="memberMap">
		<id property="id" column="id"/>
		<result property="id" column="id" />
		<result property="pw" column="pw" />
		<result property="name" column="name" />
		<result property="email" column="email" />
		<result property="gender" column="gender" />
		<result property="reg" column="reg" />
		<result property="enabled" column="enabled" />
		<collection property="authList" resultMap="authMap"></collection>
	</resultMap>
	<!-- 권한 테이블 값을 AuthVO 클래스에 대입하는것 명확히 정의 -->
	<resultMap type="com.member.domain.AuthVO" id="authMap">
		<result property="id" column="id" />
		<result property="auth" column="auth" />
	</resultMap>
	
	<select id="getMember" resultMap="memberMap">
		select m.*, a.auth 
		from memberSec m, memberSec_auth a 
		where m.id = a.id
		and m.id = #{id}
	</select>
	
	
	<update id="updateMember">
		update memberSec set name=#{name}, email=#{email} 
		where id=#{id}
	</update>
	
	<delete id="deleteMember">
		delete from memberSec where id=#{id}
	</delete>
	<delete id="deleteAuth">
		delete from memberSec_auth where id=#{id}
	</delete>
	
	<select id="idPwCheck" resultType="int">
		select count(*) from memberSec where id=#{id} 
		<if test="pw != null">
			and pw = #{pw}
		</if>
	</select>


</mapper>